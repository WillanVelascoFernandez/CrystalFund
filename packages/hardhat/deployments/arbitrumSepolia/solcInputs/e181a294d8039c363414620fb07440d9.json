{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/CrystalFund.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract CrystalFund is Ownable {\r\n    struct Project {\r\n        address creator;\r\n\t\tstring causa;\r\n        uint256 goal;\r\n        uint256 deadline;\r\n        uint256 amountRaised;\r\n        bool isActive;\r\n    }\r\n\r\n    mapping(uint256 => Project) public projects;\r\n    mapping(uint256 => mapping(address => uint256)) public contributions;\r\n    uint256 public projectCount = 0;\r\n    uint256 public contractFeePercentage = 5; // 5% fee\r\n    uint256 public maxGoal = 1000 ether; // Goal máximo inicial\r\n    uint256 public maxTime = 365; // Time máximo por recaudación\r\n\r\n    event ProjectCreated(uint256 projectId, address creator, string causa, uint256 goal, uint256 deadline);\r\n    event Contributed(uint256 projectId, address contributor, uint256 amount);\r\n    event FundsWithdrawn(uint256 projectId, address creator, uint256 amount);\r\n    event Refunded(uint256 projectId, address contributor, uint256 amount);\r\n\r\n    function createProject(string memory _causa, uint256 _goal, uint256 _duration) public {\r\n\t\trequire(_goal > 0 && _goal <= maxGoal, \"Goal must be greater than 0 and less than or equal to max goal\");\r\n\t\trequire(_duration > 0 && _duration <= maxTime, \"Duration must be between 1 and 365 days\");\r\n\r\n        uint256 projectId = ++projectCount;\r\n\r\n        projects[projectId] = Project({\r\n            creator: msg.sender,\r\n            goal: _goal,\r\n\t\t\tcausa: _causa,\r\n            deadline: block.timestamp + _duration * 1 days,\r\n            amountRaised: 0,\r\n            isActive: true\r\n        });\r\n\r\n        emit ProjectCreated(projectId, msg.sender, _causa, _goal, projects[projectId].deadline);\r\n    }\r\n\r\n    function contribute(uint256 _projectId) public payable {\r\n        require(projects[_projectId].isActive, \"Project is not active\");\r\n        require(block.timestamp < projects[_projectId].deadline, \"Project deadline has passed\");\r\n        require(msg.value > 0, \"Contribution must be greater than 0\");\r\n\r\n        projects[_projectId].amountRaised += msg.value;\r\n        contributions[_projectId][msg.sender] += msg.value;\r\n\r\n        emit Contributed(_projectId, msg.sender, msg.value);\r\n    }\r\n\r\n    function withdrawFunds(uint256 _projectId) public {\r\n        require(projects[_projectId].creator == msg.sender, \"Only project creator can withdraw funds\");\r\n        require(block.timestamp >= projects[_projectId].deadline, \"Project deadline has not passed\");\r\n\r\n\t\tuint256 amountToCreator=0;\r\n\r\n        uint256 amountRaised = projects[_projectId].amountRaised;\r\n\t\tif (projects[_projectId].amountRaised >= projects[_projectId].goal) {\r\n      \t\tuint256 fee = (amountRaised * contractFeePercentage) / 100;\r\n\t\t\tamountToCreator = amountRaised - fee;\r\n\t\t\tpayable(owner()).transfer(fee);\r\n    \t}else{\r\n\t\t\tamountToCreator = amountRaised;\r\n\t\t}\r\n\r\n        projects[_projectId].amountRaised = 0;\r\n        projects[_projectId].isActive = false;\r\n\r\n        \r\n        payable(msg.sender).transfer(amountToCreator);\r\n\r\n        emit FundsWithdrawn(_projectId, msg.sender, amountToCreator);\r\n    }\r\n\r\n\tfunction setMaxGoal(uint256 _newMaxGoal) public onlyOwner {\r\n        require(_newMaxGoal > 0, \"Max goal must be greater than 0\");\r\n        maxGoal = _newMaxGoal;\r\n    }\r\n\r\n    function setMaxTime(uint256 _newMaxTime) public onlyOwner {\r\n        require(_newMaxTime > 0, \"Max time must be greater than 0\");\r\n        maxTime = _newMaxTime;\r\n    }\r\n\r\n\tfunction getTimeRemaining(uint256 _projectId) public view returns (uint256 daysRemaining, uint256 hoursRemaining, uint256 minutesRemaining, uint256 secondsRemaining) {\r\n    Project storage project = projects[_projectId];\r\n\r\n    // Verificar si el proyecto está activo\r\n    require(project.isActive, \"Project is not active\");\r\n\r\n    // Obtener el tiempo restante en segundos\r\n    uint256 timeRemaining = project.deadline > block.timestamp ? project.deadline - block.timestamp : 0;\r\n\r\n    // Calcular días, horas, minutos y segundos\r\n    daysRemaining = timeRemaining / 1 days;\r\n    hoursRemaining = (timeRemaining % 1 days) / 1 hours;\r\n    minutesRemaining = (timeRemaining % 1 hours) / 1 minutes;\r\n    secondsRemaining = (timeRemaining % 1 minutes) / 1 seconds;\r\n\r\n    return (daysRemaining, hoursRemaining, minutesRemaining, secondsRemaining);\r\n    }\r\n\r\n    function getAllProjects() private view returns (uint256[] memory, Project[] memory) {\r\n        uint256[] memory ids = new uint256[](projectCount);\r\n        Project[] memory projectDetails = new Project[](projectCount);\r\n\r\n        for (uint256 i = 1; i <= projectCount; i++) {\r\n            ids[i - 1] = i;\r\n            projectDetails[i - 1] = projects[i];\r\n        }\r\n\r\n        return (ids, projectDetails);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}